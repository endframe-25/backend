#!/usr/bin/env bash
 
# Get django environment variables
celeryenv=`cat /opt/elasticbeanstalk/deployment/env | tr '\n' ',' | sed 's/export //g' | sed 's/$PATH/%(ENV_PATH)s/g' | sed 's/$PYTHONPATH//g' | sed 's/$LD_LIBRARY_PATH//g'`
celeryenv=${celeryenv%?}
 
# Create celery configuraiton script
celeryconf="[program:celeryd-worker]
; Set full path to celery program if using virtualenv
command=/var/app/venv/staging-LQM1lest/bin/celery worker -A vimansathi -P solo --loglevel=INFO 
 
directory=/var/app/current
user=nobody
numprocs=1
stdout_logfile=/var/log/worker.log
stderr_logfile=/var/log/worker.log
autostart=true
autorestart=true
startsecs=10
 
; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 600
 
; When resorting to send SIGKILL to the program to terminate it
; send SIGKILL to its whole process group instead,
; taking care of its children as well.
killasgroup=true
 
; if rabbitmq is supervised, set its priority higher
; so it starts first
priority=998
 
environment=$celeryenv
"
 
# Create the celery supervisord conf script
echo "$celeryconf" | tee /etc/celery.conf
 
# Add configuration script to supervisord conf (if not there already)
if ! grep -Fxq "[include]" /etc/supervisord.conf
  then
  echo "[include]" | tee -a /etc/supervisord.conf
  echo "files: celery.conf" | tee -a /etc/supervisord.conf
fi
 
# Reread the supervisord config
sudo /usr/local/bin/supervisorctl -c /etc/supervisord.conf reread
 
# Update supervisord in cache without restarting all services
# sudo /usr/local/bin/supervisorctl -c /etc/supervisord.conf update
 
# # Start/Restart celeryd through supervisord
# sudo /usr/local/bin/supervisorctl -c /etc/supervisord.conf restart celeryd-worker
